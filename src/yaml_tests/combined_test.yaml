config:
  # Base URL for all requests.
  target: https://httpbin.org
  # (Optional) Global timeout in seconds for all requests.
  timeout: 10

tests:
  # Test 1: Simple GET request without query parameters.
  - name: GET /get without query parameters returns valid response
    request:
      method: GET
      url: /get
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.raw ~ "httpbin.org/get"
      - assert: $.resp.json.args == {}

  # Test 2: GET request with query parameters.
  - name: GET /get with query parameters returns correct args
    request:
      method: GET
      url: /get
      params:
        foo: bar
        baz: qux
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.json.args.foo == "bar"
      - assert: $.resp.json.args.baz == "qux"

  # Test 3: POST request with JSON payload.
  - name: POST /post with JSON payload returns valid response
    request:
      method: POST
      url: /post
      headers:
        Content-Type: application/json
      json:
        key1: value1
        key2: value2
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.json.json.key1 == "value1"
      - assert: $.resp.json.json.key2 == "value2"

  # Test 4: PUT request with form data.
  - name: PUT /put with form data returns valid response
    request:
      method: PUT
      url: /put
      headers:
        Content-Type: application/x-www-form-urlencoded
      form:
        field1: test
        field2: 123
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.json.form.field1 == "test"
      # Note: form values are returned as strings.
      - assert: $.resp.json.form.field2 == "123"

  # Test 5: DELETE request.
  - name: DELETE /delete returns valid response
    request:
      method: DELETE
      url: /delete
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.json.url == "https://httpbin.org/delete"

  # Test 6: GET request that should return a 404 error.
  - name: GET /status/404 returns 404 error
    request:
      method: GET
      url: /status/404
    assertions:
      - assert: $.resp.status == 404

  # Test 7: GET request with a delay (testing timeout handling).
  - name: GET /delay/3 returns valid response within timeout
    request:
      method: GET
      url: /delay/3
      # Override the global timeout for this request if needed.
      timeout: 5
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.json.url == "https://httpbin.org/delay/3"

  # Test 8: GET request with header verification.
  - name: GET /headers returns custom header in response
    request:
      method: GET
      url: /headers
      headers:
        X-Custom-Header: myvalue
    assertions:
      - assert: $.resp.status == 200
      # httpbin returns headers in a JSON object; header names are case-insensitive.
      - assert: $.resp.json.headers["X-Custom-Header"] == "myvalue"

  # Test 9: POST request with form data.
  - name: POST /post with form data returns valid response
    request:
      method: POST
      url: /post
      headers:
        Content-Type: application/x-www-form-urlencoded
      form:
        username: testuser
        password: secret
    assertions:
      - assert: $.resp.status == 200
      - assert: $.resp.json.form.username == "testuser"
      - assert: $.resp.json.form.password == "secret"
